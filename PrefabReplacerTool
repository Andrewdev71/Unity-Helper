using UnityEditor;
using UnityEngine;

public class PrefabReplacerTool : EditorWindow
{
    private GameObject replacementPrefab;

    [MenuItem("Tools/Prefab Replacer Tool")]
    public static void ShowWindow()
    {
        GetWindow<PrefabReplacerTool>("Prefab Replacer");
    }

    private void OnGUI()
    {
        GUILayout.Label("Prefab Replacer Tool", EditorStyles.boldLabel);

        replacementPrefab = EditorGUILayout.ObjectField("Replacement Prefab", replacementPrefab, typeof(GameObject), true) as GameObject;

        if (GUILayout.Button("Replace Selected Prefabs"))
        {
            ReplaceSelectedPrefabs();
        }
    }

    private void ReplaceSelectedPrefabs()
    {
        if (replacementPrefab == null)
        {
            Debug.LogError("Replacement prefab is not set!");
            return;
        }

        GameObject[] selectedGameObjects = Selection.gameObjects;

        foreach (GameObject selectedObject in selectedGameObjects)
        {
            Undo.RegisterFullObjectHierarchyUndo(selectedObject, "Replace with Prefab");

            GameObject newObject = PrefabUtility.InstantiatePrefab(replacementPrefab) as GameObject;

            if (newObject != null)
            {
                newObject.transform.position = selectedObject.transform.position;
                newObject.transform.rotation = selectedObject.transform.rotation;

                Undo.DestroyObjectImmediate(selectedObject);
            }
        }

        Debug.Log($"Replaced {selectedGameObjects.Length} prefabs with {replacementPrefab.name}");
    }
}
